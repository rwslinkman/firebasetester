package nl.rwslinkman.firebasetester.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import nl.rwslinkman.firebasetester.FirebaseTester;
import nl.rwslinkman.firebasetester.gui.listener.KeyTypedListener;
import nl.rwslinkman.firebasetester.gui.listener.SimpleKeyListener;
import nl.rwslinkman.firebasetester.gui.listener.UserInterfaceEventListener;
import nl.rwslinkman.firebasetester.gui.listener.WindowListener;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * @author Rick Slinkman
 */
public class FirebaseTesterGUI implements ActionListener, KeyTypedListener {
    private UserInterfaceEventListener eventListener;
    private WindowListener windowListener;
    private RequestBodyParser bodyParser;

    private JTextField mApiKeyField;
    private JPanel guiPanel;
    private JTextArea mRequestBodyField;
    private JLabel mParseResultOutput;
    private JButton mSubmitButton;

    public FirebaseTesterGUI(UserInterfaceEventListener listener) {
        this.eventListener = listener;
        if (this.eventListener != null) {
            this.windowListener = new WindowListener(this.eventListener);
        }
    }

    public void createFrame() {
        JFrame frame = new JFrame("Firebase Tester v " + FirebaseTester.VERSION_NAME);
        frame.setContentPane(guiPanel);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        if (this.windowListener != null) {
            frame.addWindowListener(this.windowListener);
        }
//        frame.setSize(1000, 1000);
        frame.pack();
        setupUI();
        frame.setSize(new Dimension(750, 500));
        frame.setLocationRelativeTo(null);
        // Show frame
        frame.setVisible(true);
    }

    private void setupUI() {
        boolean hasParser = bodyParser != null;
        if (hasParser) {
            String empty = bodyParser.getEmpty();
            mParseResultOutput.setText(empty);
            mRequestBodyField.addKeyListener(new SimpleKeyListener(this));
        }
        mParseResultOutput.setVisible(hasParser);

        mSubmitButton.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        System.out.println("Submit button clicked");
        String apiKey = mApiKeyField.getText();
        System.out.println("Api key: " + apiKey);
        String body = mRequestBodyField.getText();
        System.out.println("Body: " + body);

        if (eventListener != null) {
            eventListener.onFirebaseTestSubmitted(apiKey, body);
        }
    }

    public void setRequestBodyParser(RequestBodyParser parser) {
        this.bodyParser = parser;
    }

    @Override
    public void onKeyTyped(char key)
    {
        if (bodyParser != null) {
            String fieldValue = mRequestBodyField.getText();
            String parseResult = bodyParser.parseRequestBody(fieldValue);
            mParseResultOutput.setText(parseResult);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        guiPanel = new JPanel();
        guiPanel.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        guiPanel.setMinimumSize(new Dimension(500, 500));
        mApiKeyField = new JTextField();
        guiPanel.add(mApiKeyField, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("API Key");
        guiPanel.add(label1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mRequestBodyField = new JTextArea();
        guiPanel.add(mRequestBodyField, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Request body");
        guiPanel.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        mParseResultOutput = new JLabel();
        mParseResultOutput.setText("Valid");
        guiPanel.add(mParseResultOutput, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSubmitButton = new JButton();
        mSubmitButton.setLabel("Send");
        mSubmitButton.setText("Send");
        guiPanel.add(mSubmitButton, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return guiPanel;
    }
}
